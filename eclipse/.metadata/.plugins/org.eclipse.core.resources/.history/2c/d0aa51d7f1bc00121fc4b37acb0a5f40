package aufgabe3.philosophers.control;

import java.util.HashSet;

import aufgabe3.philosophers.Philosopher;

public class TableMaster extends Thread {
	
	private final PhilosopherController philController;
	private boolean shouldRun = true;
	private int maxDiningDifference = 10;

	public TableMaster(final PhilosopherController philC) {
		super();
		this.philController = philC;
	}
	
	public void run() {
		
		HashSet<Philosopher> phils = this.philController.getPhilosopers();
		
		while(this.isAlive() && shouldRun) {
			long avgDinings = 0;
			
			//calculate the average number of dinings
			
			for (Philosopher phil : phils)
				avgDinings += phil.getNumberOfDinners();
			
			avgDinings /= phils.size();
			
			
			//check if a phil differs from the avg
			//caution: this method is not very accurate.
		}
		
		//wait until we check next
		try {
			sleep(500);
		} catch (InterruptedException e) {
			System.err.println("This should not happen.\nBurning and dying.");
			e.printStackTrace();
		}
	}
	
	
	public void suicide() {
		this.shouldRun = false;
	}

	public int getMaxDiningDifference() {
		return maxDiningDifference;
	}

	public void setMaxDiningDifference(int maxDiningDifference) {
		this.maxDiningDifference = maxDiningDifference;
	}
	
	
}
