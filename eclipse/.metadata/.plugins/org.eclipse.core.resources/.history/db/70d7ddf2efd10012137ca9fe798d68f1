package aufgabe4.PhilosopherWorker;

import aufgabe4.models.RemotePhilosopherIF;

public class PhilRunner extends Thread {
	
	private final int philID;
	private final PhilController philController;
	
	private boolean shouldRun = true;

	public PhilRunner(final int philID, final PhilController philController) {
		super();
		assert(philID >= 0 && philController != null);
		
		this.philController = philController;
		this.philID = philID;
	}
	
	
	public void run() {
		
		while (this.isAlive() && shouldRun) {
			
			RemotePhilosopherIF remotePhil = this.getPhil();
			
			if (remotePhil.isHungry() && !remotePhil.isWaitingForSeat()) { //try taking a seat on the table
				//actually we do not care if the philosopher did get a seat or not. we will yield anyways.
				boolean success = this.philController.seatOrQueuePhilosopher(remotePhil);
				
				//this is false if the philosopher has been queued for a seat
				boolean isSeated = !remotePhil.isWaitingForSeat() && success;
				
				if (isSeated)
					System.out.println("Philospher seated: " + remotePhil);
				else if (success && !isSeated)
					System.out.println("Philospher queued: " + remotePhil);
				else
					System.out.println("Philosopher not seated or queued: " + remotePhil);
			}
			else if (remotePhil.isSaturated()) { //go to the mediation room if our phil has finished eating
				this.philController.takeSeatFromPhilosopher(remotePhil);
				System.out.println("Took seat from Philosopher: " + remotePhil);
			}
			else { 
				//nothing to do (yield in all cases)
			}
			
			try {
				//give the cpu a bit time
				sleep(100);
			} catch (InterruptedException e) {
				// should not happen
				e.printStackTrace();
			}
			//yield();
		}
		
		this.cleanup();
	}
	
	public void killPhilosopher() {
		this.shouldRun = false;
	}
	
	private void cleanup() {
		RemotePhilosopherIF phil = this.getPhil();
	}

	public RemotePhilosopherIF getPhil() {
		if (this.philID != -1)
			return (RemotePhilosopherIF) PhilWorker.getPhilWorkerInstance().getObjectWithID(philID);
		else
			return null;
	}
}
