package aufgabe3.philosophers.control;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;

import javax.management.RuntimeErrorException;

import aufgabe3.philosophers.*;

public class PhilosopherController {
	
	private final ArrayList<Seat> table;
	private final HashSet<PhilosopherRunner> philosopherRunners;
	private TableMaster tableMaster;
	
	
	public PhilosopherController(final Collection<Philosopher> philosophers, final ArrayList<Seat> table) {
		super();
		
		if (philosophers == null || philosophers.isEmpty())
			throw new RuntimeErrorException(null, "You have to initialize the PhilosopherController with philosophers.");
		else if (table == null || table.isEmpty())
			throw new RuntimeErrorException(null, "You have to initialize the PhilosopherController with a nonempty table.");
		
		this.table = table;
		this.philosopherRunners = new HashSet<PhilosopherRunner>(philosophers.size());
		
		//create a philosopher runner for each philosopher
		for (final Philosopher phil : philosophers)
			philosopherRunners.add(new PhilosopherRunner(phil, this));
		
	}
	
	/**
	 * WARNING: This method can only be called once!
	 */
	public void startPhilosophers() {
		System.out.println("Running Philosophers...");
		
		for (final PhilosopherRunner runner : philosopherRunners)
			runner.start();
	}

	/**
	 * WARNING: This method can only be called once!
	 */
	public void stopPhilosophers() {
		System.out.println("Stopping Philosophers...");
		
		for (final PhilosopherRunner runner : philosopherRunners)
			runner.killPhilosopher();
	}
	
	public void startTableMaster(final int maxDiningDifference) {
		if (this.tableMaster != null)
			this.stopTableMaster();
		
		this.tableMaster = new TableMaster(this);
		if (maxDiningDifference >= 10)		
			tableMaster.setMaxDiningDifference(maxDiningDifference);
		this.tableMaster.start();
	}
	
	public void stopTableMaster() {
		this.tableMaster.suicide();
		this.tableMaster = null;
	}
	
	public boolean seatPhilosopher(final Philosopher phil) {
		boolean success = false;
		
		/**
		 * We do NOT synchronize here. this works beacause the seats array will never be modified.
		 * Synchronisation is done in the Philosopher and Seat class.
		 */
		for (final Seat seat : table) {
			if (seat.canBeTaken()) {
				success = phil.assignSeat(seat);
				
				if (success)
					break;
			}
		}
		
		return success;
	}
	
	public HashSet<Philosopher> getPhilosopers() {
		HashSet<Philosopher> phils = new HashSet<Philosopher>(this.philosopherRunners.size());
		
		for (final PhilosopherRunner runner : philosopherRunners)
			if (runner.isAlive())
				phils.add(runner.getPhil());
		
		return phils;
	}
	
	public void takeSeatFromPhilosopher(final Philosopher phil) {
		phil.removeFromSeat();
	}
}
